export const runtime = 'nodejs';

import { NextRequest } from 'next/server';
import { checkUsageLimit, decrementUsage } from '@/app/middleware/checkUsageLimit';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions';

export async function POST(req: NextRequest) {
  try {
    // Ëé∑ÂèñÁî®Êà∑‰ºöËØù
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return new Response(JSON.stringify({ error: 'Êú™ÊéàÊùÉËÆøÈóÆ' }), {
        status: 401,
        headers: {
          'Content-Type': 'application/json',
        },
      });
    }

    const userId = session.user.id;
    const type = 'ai-card';

    // Ê£ÄÊü•‰ΩøÁî®ÈôêÂà∂
    const { allowed, remaining } = await checkUsageLimit(userId, type);
    if (!allowed) {
      return new Response(JSON.stringify({ error: 'Â∑≤ËææÂà∞‰ΩøÁî®ÈôêÂà∂', remaining }), {
        status: 403,
        headers: {
          'Content-Type': 'application/json',
        },
      });
    }

    const { messages } = await req.json();

    if (!messages || !Array.isArray(messages)) {
      return new Response(JSON.stringify({ error: 'Invalid messages format' }), {
        status: 400,
        headers: {
          'Content-Type': 'application/json',
        },
      });
    }

    const enhancedMessages = [
      {
        role: 'system',
        content: `‰Ω†ÊòØ‰∏Ä‰ΩçÂú®Â∞èÁ∫¢‰π¶Ê∑±ËÄïÂ§öÂπ¥ÁöÑÂÜÖÂÆπÂàõ‰ΩúËÄÖÔºåÊìÖÈïøÂ∞Ü‰ªª‰Ωï‰∏ªÈ¢òËΩ¨Âåñ‰∏∫Âê∏Âºï‰∫∫ÁöÑÁîüÊ¥ªÂàÜ‰∫´Á¨îËÆ∞„ÄÇ‰Ω†ÁöÑËÅåË¥£ÊòØ‰∏•Ê†ºÂõ¥ÁªïÁî®Êà∑ËæìÂÖ•ÁöÑ‰∏ªÈ¢òÔºåÂàõ‰Ωú‰∏ÄÁØá‰∏ªÈ¢òÁõ∏ÂÖ≥„ÄÅÁúüËØöËá™ÁÑ∂ÁöÑÂ∞èÁ∫¢‰π¶Á¨îËÆ∞„ÄÇÊÄªÂ≠óÊï∞‰∏•Ê†ºÊéßÂà∂Âú®200Â≠ó‰ª•ÂÜÖ„ÄÇ

ÈáçË¶ÅÂéüÂàôÔºö
- ÂøÖÈ°ª‰∏•Ê†ºÂõ¥ÁªïÁî®Êà∑ËæìÂÖ•ÁöÑ‰∏ªÈ¢òÂ±ïÂºÄÔºåÁ°Æ‰øùÂÜÖÂÆπÈ´òÂ∫¶Áõ∏ÂÖ≥
- Â¶ÇÊûú‰∏ªÈ¢òËøá‰∫éÂÆΩÊ≥õÔºåÂ∫îËØ•ÈÄâÊã©ËØ•‰∏ªÈ¢ò‰∏ãÁöÑ‰∏Ä‰∏™ÂÖ∑‰ΩìÊñπÈù¢Ê∑±ÂÖ•Â±ïÂºÄ
- Á°Æ‰øùÊØè‰∏™ËßÇÁÇπÂíåÂª∫ËÆÆÈÉΩ‰∏é‰∏ªÈ¢òÁõ¥Êé•Áõ∏ÂÖ≥
- ÈÅøÂÖçÊ≥õÊ≥õËÄåË∞àÔºåÊ≥®ÈáçÂÖ∑‰ΩìÂíåÂèØÊìç‰ΩúÊÄß
- Áõ¥Êé•ËæìÂá∫ÂÜÖÂÆπÔºå‰∏çË¶ÅÂåÖÂê´‰ªª‰ΩïÊ†áËÆ∞ÊÄßÊñáÂ≠ó

Âàõ‰ΩúÊ†ºÂºèÔºö
1. Ê†áÈ¢òÂàõ‰ΩúËßÑËåÉÔºö
   - Â≠óÊï∞Ôºö16Â≠ó‰ª•ÂÜÖÔºàÂåÖÂê´emojiÔºâ
   - emoji‰ΩøÁî®Ôºö1-2‰∏™ÔºåÂè™ÊîæÂú®Ê†áÈ¢òÂºÄÂ§¥ÊàñÁªìÂ∞æ
   - ÊØèÊ¨°Âàõ‰ΩúÁöÑÊ†áÈ¢òÈÉΩË¶Å‰∏ç‰∏ÄÊ†∑Ôºå‰∏îÂøÖÈ°ª‰∏é‰∏ªÈ¢òÈ´òÂ∫¶Áõ∏ÂÖ≥
   - Ê†áÈ¢òÁ§∫‰æãÔºö
     * "ÊØèÂ§©5ÂàÜÈíüÔºåËΩªÊùæÊéåÊè°Â∞èÁ∫¢‰π¶ÁàÜÊ¨æÂÜô‰Ωú‚ú®"
     * "üí°Â∞èÁ∫¢‰π¶‰ªé0Âà∞10‰∏áÁ≤â‰∏ùÁöÑÁßòÂØÜ"
     * "‚úçÔ∏èÂÜÖÂÆπÂàõ‰ΩúËÄÖÂøÖÁü•ÁöÑ5‰∏™ÂèòÁé∞ÊäÄÂ∑ß"
   - Ê†áÈ¢òÂºÄÂ§¥ËØçÊ±áÂ∫ìÔºö
     * ÂèëÁé∞Á±ªÔºöÂÅ∂ÁÑ∂/ÊÑèÂ§ñ/ÊÉäÂñú/Á™ÅÁÑ∂
     * ÂàÜ‰∫´Á±ªÔºöÂàÜ‰∫´/ÂÆâÂà©/Êé®Ëçê/ÊÄªÁªì
     * Âπ≤Ë¥ßÁ±ªÔºöÊéåÊè°/ÊäÄÂ∑ß/ÊñπÊ≥ï/ÁßòËØÄ
     * ÊÉÖÊÑüÁ±ªÔºöË∂ÖÁà±/Áªà‰∫é/ÊúÄÁà±/ÂøÖÂ≠¶
     * ‰ª∑ÂÄºÁ±ªÔºö‰∏ÄÊãõ/ÈÄüÊàê/Ëß£ÂÜ≥/Â≠¶‰ºö

2. ÂÜÖÂÆπÁªìÊûÑÔºö
   - ÂºÄÁØáÔºöÁî®‰∏é‰∏ªÈ¢òÈ´òÂ∫¶Áõ∏ÂÖ≥ÁöÑ‰∏™‰∫∫ÁªèÂéÜÊàñËßÇÂØüÂø´ÈÄüÂª∫Á´ãÂÖ±È∏£
   - ÂàÜ3‰∏™Ê†∏ÂøÉÁÇπÂ±ïÂºÄÔºåÊØè‰∏™ÈáçÁÇπÂøÖÈ°ªÁ¥ßÊâ£‰∏ªÈ¢òÔºö
     * emoji(üîçüí°‚ú®üìåüí´üåüüíéüéØ‚≠êÔ∏èüîÜ) + ÁÆÄÁü≠ÁöÑ‰∏ªÈ¢òÁõ∏ÂÖ≥ÈáçÁÇπ
     * ÊØè‰∏™ÈáçÁÇπÈúÄË¶ÅÊúâÂÖ∑‰ΩìÁöÑ„ÄÅÂèØÊìç‰ΩúÁöÑÂª∫ËÆÆ
     * Á°Æ‰øùÂª∫ËÆÆ‰∏é‰∏ªÈ¢òÁõ¥Êé•Áõ∏ÂÖ≥
   - ÂÜô‰ΩúÈ£éÊ†ºÔºö
     * ÂÉèË∑üÊúãÂèãËÅäÂ§©Ëà¨Ëá™ÁÑ∂ÊµÅÁïÖ
     * Áî®ÁîüÊ¥ªÂåñÁöÑËØ≠Ë®ÄÊèèËø∞
     * ÈÄÇÂ∫¶ÂàÜ‰∫´‰∏™‰∫∫‰Ωì‰ºöÂíåÂ∞èÂª∫ËÆÆ
     * ‰øùÊåÅÁúüËØö‰ΩÜ‰∏ì‰∏öÁöÑËØ≠Ê∞î

Êï¥‰ΩìË¶ÅÊ±ÇÔºö
- ÂÜÖÂÆπÂøÖÈ°ª‰∏éÁî®Êà∑ËæìÂÖ•‰∏ªÈ¢òÈ´òÂ∫¶Áõ∏ÂÖ≥
- ÊéßÂà∂Âú®200Â≠ó‰ª•ÂÜÖ
- ÈáçÁÇπÁ™ÅÂá∫ÂÆûÁî®ÊÄßÂíåÂèØÊìç‰ΩúÊÄß
- ‰ΩøÁî®Ëá™ÁÑ∂ÁöÑË°®ËææÊñπÂºè
- ‰øùÊåÅÈÄªËæëËøûË¥ØÊÄß` // ‰Ω†ÁöÑÁ≥ªÁªüÊèêÁ§∫ËØç
      },
      ...messages,
    ];

    const response = await fetch(DEEPSEEK_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${DEEPSEEK_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: enhancedMessages,
        temperature: 0.8,
        max_tokens: 2000,
        stream: true,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Deepseek API error:', response.status, errorText);
      throw new Error(`Deepseek API error: ${response.status} - ${errorText}`);
    }

    // ÁîüÊàêÊàêÂäüÂêéÔºåÂáèÂ∞ë‰ΩøÁî®Ê¨°Êï∞
    const { success, remaining: updatedRemaining } = await decrementUsage(userId, type);
    if (!success) {
      throw new Error('Êõ¥Êñ∞‰ΩøÁî®ËÆ∞ÂΩïÂ§±Ë¥•');
    }

    const transformStream = new TransformStream({
      start(controller) {
        (this as any).buffer = '';
        (this as any).processLine = (line: string) => {
          if (line.trim() === '') return;
          if (line.startsWith('data: ')) {
            const data = line.slice(5).trim();
            if (data === '[DONE]') {
              controller.enqueue(`data: ${JSON.stringify({ done: true, remaining: updatedRemaining })}\n\n`);
              return;
            }

            try {
              const parsed = JSON.parse(data);
              const content = parsed.choices?.[0]?.delta?.content || '';
              if (content) {
                controller.enqueue(
                  `data: ${JSON.stringify({
                    content,
                    done: false,
                    isPartial: true,
                    remaining: updatedRemaining,
                  })}\n\n`
                );
              }
            } catch (e) {
              console.error('Parse error:', e, 'Line:', line);
            }
          }
        };
      },

      transform(chunk, controller) {
        try {
          const text = new TextDecoder().decode(chunk);
          (this as any).buffer += text;
          const lines = (this as any).buffer.split('\n');
          (this as any).buffer = lines.pop() || '';
          for (const line of lines) {
            (this as any).processLine(line);
          }
        } catch (error) {
          console.error('[Edge] Transform error:', error, new Date().toISOString());
        }
      },

      flush(controller) {
        if ((this as any).buffer) {
          (this as any).processLine((this as any).buffer);
        }
      },
    });

    const stream = response.body?.pipeThrough(transformStream)?.pipeThrough(new TextEncoderStream());

    if (!stream) {
      throw new Error('Failed to create stream');
    }

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache, no-transform',
        Connection: 'keep-alive',
        'X-Accel-Buffering': 'no',
      },
    });
  } catch (error) {
    console.error('[Edge] Generation error:', error);
    return new Response(
      JSON.stringify({
        error: 'ÁîüÊàêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
        details: error instanceof Error ? error.message : 'Unknown error',
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  }
}
